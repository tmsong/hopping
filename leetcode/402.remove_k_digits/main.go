/*
*
402. 移掉 K 位数字
给你一个以字符串表示的非负整数 num 和一个整数 k ，移除这个数中的 k 位数字，使得剩下的数字最小。请你以字符串形式返回这个最小的数字。

示例 1 ：

输入：num = "1432219", k = 3
输出："1219"
解释：移除掉三个数字 4, 3, 和 2 形成一个新的最小的数字 1219 。
示例 2 ：

输入：num = "10200", k = 1
输出："200"
解释：移掉首位的 1 剩下的数字为 200. 注意输出不能有任何前导零。
示例 3 ：

输入：num = "10", k = 2
输出："0"
解释：从原数字移除所有的数字，剩余为空就是 0 。

思路：贪心算法，但用栈加速这个过程
为了保证最后剩下的靠前的数字尽量小，那么其实是从左到右尽量删。
给定一个长度为n的数字序列D0,D1,D2,D3...Dn-1，从左往右找到第一个位置i，使得Di<Di-1，那么删去Di-1即可。
如果不存在，说明整个数字序列单调不降，删去最后一个数字即可。

考虑从左往右增量的构造最后的答案。我们可以用一个栈维护当前的答案序列，栈中的元素代表截止到当前位置，
删除不超过 k 个数字后，所能得到的最小整数。根据之前的讨论：在使用 k 个删除次数之前，栈中的序列从栈底到栈顶单调不降。
因此，对于每个数字，如果该数字小于栈顶元素，我们就不断地弹出栈顶元素，直到

1.栈为空
2.或者新的栈顶元素不大于当前数字
3.或者我们已经删除了 k 位数字

上述步骤结束后我们还需要针对一些情况做额外的处理：

1.如果我们删除了 m 个数字且 m<k，这种情况下我们需要从序列尾部删除额外的 k−m 个数字。
2.如果最终的数字序列存在前导零，我们要删去前导零。
3.如果最终数字序列为空，我们应该返回 0。

最终，从栈底到栈顶的答案序列即为最小数。
*/
package main

import "strings"

func removeKdigits(num string, k int) string {
	stack := []byte{}
	for i := range num {
		digit := num[i]
		for k > 0 && len(stack) > 0 && digit < stack[len(stack)-1] {
			stack = stack[:len(stack)-1]
			k--
		}
		stack = append(stack, digit)
	}
	stack = stack[:len(stack)-k]
	ans := strings.TrimLeft(string(stack), "0")
	if ans == "" {
		ans = "0"
	}
	return ans
}

func main() {

}